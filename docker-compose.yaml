version: '3.9'
services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
    healthcheck:
      test: ["CMD","rabbitmqctl","status"]
      interval: 30s
      timeout: 10s
      retries: 5
  orders-db:
    image: postgres:16
    environment:
      POSTGRES_USER: orders
      POSTGRES_PASSWORD: orders
      POSTGRES_DB: orders
    healthcheck:
      test: ["CMD","pg_isready","-U","orders"]
      interval: 30s
      timeout: 10s
      retries: 5
  payments-db:
    image: postgres:16
    environment:
      POSTGRES_USER: payments
      POSTGRES_PASSWORD: payments
      POSTGRES_DB: payments
    healthcheck:
      test: ["CMD","pg_isready","-U","payments"]
      interval: 30s
      timeout: 10s
      retries: 5
  orders-api:
    build:
      context: .
      dockerfile: ./Order/Api/Dockerfile
    ports: [ "8080:8080" ]
    environment:
      ConnectionStrings__Default: Host=orders-db;Username=orders;Password=orders;Database=orders
      Rabbit__Host: rabbitmq
      Rabbit__User: guest
      Rabbit__Pass: guest
    depends_on:
      orders-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  payments-api:
    build:
      context: .
      dockerfile: ./Payment/Api/Dockerfile
    ports: [ "8081:8080" ]
    environment:
      ConnectionStrings__Default: Host=payments-db;Username=payments;Password=payments;Database=payments
      Rabbit__Host: rabbitmq
      Rabbit__User: guest
      Rabbit__Pass: guest
    depends_on:
      payments-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  gateway:
    build:
      context: ./ApiGateway
    ports: [ "8000:8080" ]
    depends_on:
      orders-api:
        condition: service_started
      payments-api:
        condition: service_started